from backtest.hk_stocks.api import get_tradingdays, get_company_info, get_dailyquote_single, \
    get_dailyquote_many, get_adj_info, stockflag, get_financial_daily
from backtest.hk_stocks.utils import int2datetime, forwardchangeday
from backtest.hk_stocks.Performance import *
from tqdm import tqdm
import pandas as pd

user = 'root'
passwd = 'rgf12345'
backward_date = 20160501
begin_date = 20160601
end_date = 20160801
fee_buy = 2 / 1000
fee_sell = 2 / 1000
stock_num = 10
cash_initial = 2000000
order_type = "OpenPrice"
tradingdays_back = get_tradingdays(user, passwd, backward_date, end_date)
tradingdays = get_tradingdays(user, passwd, begin_date, end_date)

basic_info_in = get_company_info(user, passwd, 'in')
basic_info_stop = get_company_info(user, passwd, 'stop')
basic_info_pause = get_company_info(user, passwd, 'pause')
basic_info_all = pd.concat([basic_info_in, basic_info_stop, basic_info_pause])
basic_info_all = basic_info_all.reset_index(drop=True)

change_days = []
choose_days = []
tradingdays_monthday = int2datetime(tradingdays)['tradingdays'].dt.month_name()

for i in range(len(tradingdays_monthday) - 1):
    if tradingdays_monthday[i] != tradingdays_monthday[i + 1]:
        choose_days.append(tradingdays['tradingdays'][i])
        change_days.append(tradingdays['tradingdays'][i + 1])

df_pos_all = pd.DataFrame(columns=['date', 'InnerCode', 'weight'])
for i in range(len(choose_days)):
    print("current choose day is: ", choose_days[i])

    changeday = change_days[i]  # 用于判断买入股票是否停牌

    index_end = tradingdays_back[tradingdays_back['tradingdays'] == choose_days[i]].index[0]
    bbb = tradingdays_back['tradingdays'][index_end - 19]
    eee = tradingdays_back['tradingdays'][index_end]
    df = pd.DataFrame(columns=basic_info_all['InnerCode'].tolist(), index=range(20))

    for iii in basic_info_all['InnerCode']:
        try:
            df[iii] = get_dailyquote_many(user, passwd, iii, 'TurnoverValue', bbb, eee).values
        except (KeyError, ValueError) as e:
            pass

    df = df.fillna(0)
    df_mean = pd.DataFrame(columns=['InnerCode', 'mean_values'], index=range(df.shape[1]))
    df_mean['InnerCode'] = basic_info_all['InnerCode'].values
    df_mean['mean_values'] = df.mean(0).values
    df_mean = df_mean.sort_values(by='mean_values', ascending=False).reset_index(drop=True)

    df_score = pd.DataFrame(columns=['InnerCode', 'pettm'], index=range(300))
    df_score['InnerCode'] = df_mean['InnerCode'][:300]
    for s in range(len(df_score['InnerCode'])):
        try:
            df_score['pettm'][s] = \
                get_financial_daily(user, passwd, df_score['InnerCode'][s], "P_E_Daily_Time_Series_Ratio",
                                    choose_days[i]).values[0][0]
        except (KeyError, ValueError) as e:
            pass
    df_score = df_score.dropna(how='any', axis=0)
    df_score = df_score.sort_values(by='pettm', ascending=True).reset_index(drop=True)

    # 剔除停牌的股票
    able_list = []
    for stock in df_score['InnerCode']:
        if stockflag(changeday, stock) and len(able_list) < stock_num:
            able_list.append(stock)
        elif len(able_list) == stock_num:
            break
    code_list = pd.Series(able_list)
    # code_list = df_mean['InnerCode'][:stock_num]

    df_pos = pd.DataFrame(index=range(stock_num))
    df_pos['date'] = change_days[i]
    df_pos['InnerCode'] = code_list.values
    df_pos['weight'] = 1 / stock_num
    df_pos_all = pd.concat([df_pos_all, df_pos], axis=0)

df_pos_all = df_pos_all.reset_index(drop=True)

df_ret = pd.DataFrame(columns=['date', 'profit', 'capital'], index=range(len(tradingdays)))
df_ret['date'] = tradingdays['tradingdays'].values
df_ret['profit'] = 0.
df_ret['capital'] = cash_initial
take_position = 0

# 开始回测
for i in tqdm(range(len(tradingdays))):
    ddd = tradingdays['tradingdays'][i]
    if ddd in change_days:
        if ddd == change_days[0]:  # 首个选股日
            take_position += 1
            df0 = df_pos_all[df_pos_all['date'] == ddd].reset_index(drop=True)
            df_md = np.ones((len(df0), 8))
            for j in range(len(df0)):
                iii = df0['InnerCode'][j]  # 这里需要买的股票已经剔除了明天停牌的
                df_md[j, 0] = cash_initial * df0['weight'][j]
                df_md[j, 1] = basic_info_all[basic_info_all['InnerCode'] == iii]['TradingUnit'].values[0]
                df_md[j, 2] = get_dailyquote_single(user, passwd, iii, order_type, ddd).values[0][0]
                df_md[j, 3] = int(df_md[j, 0] / df_md[j, 1] / df_md[j, 2])
                df_md[j, 4] = df_md[j, 3] * df_md[j, 1] * df_md[j, 2]
                df_md[j, 5] = df_md[j, 4] * fee_buy
                df_md[j, 7] = get_dailyquote_single(user, passwd, iii, 'ClosePrice', ddd).values[0][0]
            df_ret['profit'][i] = sum((df_md[:, 7] - df_md[:, 2]) * df_md[:, 1] * df_md[:, 3] - df_md[:, 5])
            df_ret['capital'][i] = df_ret['capital'][i - 1] + df_ret['profit'][i]
            df_md[:, 0] = df_md[:, 7] * df_md[:, 1] * df_md[:, 3]
        else:  # 非首个的选股日（调仓）
            df0_old = df0
            df_md_old = df_md
            df0 = df_pos_all[df_pos_all['date'] == ddd].reset_index(drop=True)
            df_md = np.ones((len(df0), 8))
            divided_capital = 0
            money_collapse = 0
            stop_list = []
            stop_index_list = []
            for j in range(len(df0_old)):  # 卖出曾经持有但是新的调仓名单显示不持有的
                iii = df0_old['InnerCode'][j]
                if iii not in df0['InnerCode'].tolist():
                    # 本次调仓时全部平仓的股票(同时判断其是否停牌，由于这个是对上个changeday的股票在下一个changeday做判断
                    # 所以需要再判断一次)
                    if stockflag(ddd, iii):
                        try:
                            adj_info = get_adj_info(user, passwd, iii, ddd).values[0]
                            divided_capital = divided_capital + adj_info[0] * df_md_old[j, 1] * df_md_old[j, 3]
                            df_md_old[j, 3] = df_md_old[j, 3] * adj_info[1]
                            df_md_old[j, 2] = df_md_old[j, 3] / adj_info[1]
                        except:
                            pass
                        open_collapse = get_dailyquote_single(user, passwd, iii, order_type, ddd).values[0][0]
                        money_collapse = money_collapse + (open_collapse * (1 - fee_sell) - df_md[j, 2]) * df_md[j, 1] * \
                                         df_md[j, 3]
                    else:
                        stop_list.append(iii)
                        stop_index_list.append(df0_old[df0_old['InnerCode'] == iii].index[0])# 停牌的股票在上一个周期的持仓的位置
            for index in range(len(stop_list)):
                df_md[-index - 1, :] = df_md_old[stop_index_list[index], :]
                df0['InnerCode'][-index - 1] = stop_index_list[index]  # df0这里进行了停牌调整

            # 由于某些卖出没有成功（停牌），这里需要对本次的df0进行调整（将df_old没有卖出的n行填到df_md末尾
            # （表示剔除了原来选股中得分比较低的），并对len（df0）减少n）

            for j in range(len(df0) - len(stop_list)):  # 开始调仓（针对新的、及曾经持有，现在仍持有的）
                iii = df0['InnerCode'][j]  # df0的股票都是在changedays非停牌的
                df_md[j, 0] = df_ret['capital'][i - 1] * df0['weight'][j]
                df_md[j, 1] = basic_info_all[basic_info_all['InnerCode'] == iii]['TradingUnit'].values[0]
                df_md[j, 2] = get_dailyquote_single(user, passwd, iii, order_type, ddd).values[0][0]
                df_md[j, 3] = int(df_md[j, 0] / df_md[j, 1] / df_md[j, 2])
                df_md[j, 4] = df_md[j, 3] * df_md[j, 1] * df_md[j, 2]

                money_sell = 0
                money_buy = 0
                money_change_fee = 0
                if iii in df0_old['InnerCode'].tolist() and stockflag(ddd, iii):  # 判断出可以调仓的旧股票
                    index = df0_old['InnerCode'].tolist().index(iii)
                    try:
                        adj_info = get_adj_info(user, passwd, iii, ddd).values[0]
                        divided_capital = divided_capital + adj_info[0] * df_md[j, 1] * df_md[j, 3]
                        df_md[j, 3] = df_md[j, 3] * adj_info[1]
                    except:
                        pass
                    lot_add = (df_md[j, 0] - df_md_old[index, 0]) / df_md[j, 2] / df_md[j, 1]
                    if lot_add <= 0:
                        lot_add = int(-lot_add)
                        money_sell = money_sell + lot_add * df_md[j, 1] * df_md[j, 2]
                        money_change_fee = money_change_fee + money_sell * fee_sell
                    else:
                        lot_add = int(lot_add)
                        money_buy = money_buy + lot_add * df_md[j, 1] * df_md[j, 2]
                        money_change_fee = money_change_fee + money_buy * fee_buy
                    df_md[j, 5] = money_change_fee
                    df_md[j, 7] = get_dailyquote_single(user, passwd, iii, 'ClosePrice', ddd).values[0][0]
                else:
                    lot_add = int(df_md[j, 0] / df_md[j, 2] / df_md[j, 1])
                    money_buy = money_buy + lot_add * df_md[j, 2] * df_md[j, 3]
                    money_change_fee = money_change_fee + money_buy * fee_buy
                    df_md[j, 5] = money_change_fee
                    df_md[j, 7] = get_dailyquote_single(user, passwd, iii, 'ClosePrice', ddd).values[0][0]
            df_ret['profit'][i] = money_collapse + sum(
                (df_md[:, 7] - df_md[:, 2]) * df_md[:, 1] * df_md[:, 3] - df_md[:, 5])
            df_ret['capital'][i] = df_ret['capital'][i - 1] + df_ret['profit'][i]

    elif take_position == 1 and ddd not in change_days:
        divided_capital = 0
        stop_list = []

        # 上一个changeday有多少停牌的股票
        # last_changeday = forwardchangeday(ddd, change_days)
        # df0 = df_pos_all[df_pos_all['date'] == last_changeday].reset_index(drop=True)
        # 从df_pos_all获取上一个changeday持仓信息（考虑了停牌）

        for iii in df0['InnerCode']:
            if stockflag(ddd, iii):
                continue
            else:
                stop_list.append(iii)

        for j in range(len(df0) - len(stop_list)):
            iii = df0['InnerCode'][j]
            try:
                adj_info = get_adj_info(user, passwd, iii, ddd).values[0]
                divided_capital = divided_capital + adj_info[0] * df_md[j, 1] * df_md[j, 3]
                df_md[j, 3] = df_md[j, 3] * adj_info[1]
                df_md[j, 2] = df_md[j, 2] / adj_info[1]  ###
            except KeyError:
                df_md[j, 2] = df_md[j, 7]
                df_md[j, 3] = int(df_md[j, 0] / df_md[j, 1] / df_md[j, 2])

        # 对于当下持仓股票行情数据的更新
        for index in range(len(stop_list)):
            df0['InnerCode'][-index - 1] = stop_list[-index - 1]  # 替换为真实的持仓状况

        for j in range(len(df0)):    # 这里对df0中所有的持仓股票都进行了更新，没有忽略停牌的
            iii = df0['InnerCode'][j]
            df_md[j, 7] = get_dailyquote_single(user, passwd, iii, 'ClosePrice', ddd).values[0][0]
            df_md[j, 0] = df_md[j, 7] * df_md[j, 1] * df_md[j, 3]  # 持仓总市值

        df_ret['profit'][i] = sum((df_md[:, 7] - df_md[:, 2]) * df_md[:, 1] * df_md[:, 3])
        df_ret['capital'][i] = df_ret['capital'][i - 1] + df_ret['profit'][i]

# Strategy Performance
capital = df_ret['capital']
total_stockvalue = sum(df_md[:, 1] * df_md[:, 7] * df_md[:, 3])
multiplot(capital, tradingdays['tradingdays'], total_stockvalue)
